// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// [設計方針]
// ① Nullのデータを極力作らない。 データ作成のタイミングでテーブルを分ける。

// [コマンド]
// npx prisma migrate reset
// npx prisma db push
// npx prisma migrate dev --name ""

model Client {
  id               Int            @id @default(autoincrement())
  uuid             String         @unique @default(uuid()) @db.Uuid
  name             String
  description      String         @default("")
  status           String         @default("init")
  tel              String
  email            String
  stripeCustomerId String
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  deleted          DateTime?
  lineUser         LineUser[]
  LineProvider     LineProvider[]
}

model LineProvider {
  id          Int           @id @default(autoincrement())
  uuid        String        @unique @default(uuid()) @db.Uuid
  name        String
  description String
  client      Client        @relation(fields: [clientId], references: [id])
  clientId    Int
  lineChannel LineChannel[]
  liffChannel LiffChannel[]
  LineUser    LineUser[]

  @@index([clientId])
  @@index([uuid])
}

model LineChannel {
  id             Int          @id @default(autoincrement())
  uuid           String       @unique @default(uuid()) @db.Uuid
  name           String
  description    String
  channelId      String
  channelSecret  String
  accessToken    String
  channelExpire  DateTime
  lineProvider   LineProvider @relation(fields: [lineProviderId], references: [id])
  lineProviderId Int
}

model LiffChannel {
  id             Int          @id @default(autoincrement())
  uuid           String       @unique @default(uuid()) @db.Uuid
  name           String
  description    String
  channelId      String
  channelSecret  String
  accessToken    String
  channelExpire  DateTime
  lineProvider   LineProvider @relation(fields: [lineProviderId], references: [id])
  lineProviderId Int
  liffApp        LiffApp[]
}

model LiffApp {
  id            Int           @id @default(autoincrement())
  uuid          String        @unique @default(uuid()) @db.Uuid
  liffId        String
  name          String
  endpointUrl   String
  size          LIFF_APP_TYPE
  liffChannel   LiffChannel   @relation(fields: [liffChannelId], references: [id])
  liffChannelId Int
}

model LineUser {
  id               Int          @id @default(autoincrement())
  uuid             String       @unique @default(uuid()) @db.Uuid
  lineId           String
  lineName         String
  status           String       @default("active")
  language         String
  lineImage        String?
  statusMessage    String?
  stripeCustomerId String
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
  deleted          DateTime?
  profile          Profile?
  client           Client       @relation(fields: [clientId], references: [id])
  clientId         Int
  lineProvider     LineProvider @relation(fields: [lineProviderId], references: [id])
  lineProviderId   Int

  @@unique([clientId, lineId])
  @@index([clientId])
  @@index([lineId])
  @@index([uuid])
}

model Profile {
  name       String
  nameKana   String
  image      String
  gender     GENDER
  bio        String
  birthday   String
  tel        String
  email      String
  address1   String
  address2   String
  address3   String
  postCode   String
  adminMemo  String
  userMemo   String
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  deleted    DateTime?
  lineUser   LineUser  @relation(fields: [lineUserId], references: [id])
  lineUserId Int       @unique

  @@index([lineUserId])
}

enum GENDER {
  MALE
  FEMALE
  OTHERE
}

enum LIFF_APP_TYPE {
  Full
  Tall
  Compact
}
